substitutions:
  name: esphome-web-8446c0
  friendly_name: matrixclock-esphome

### V1.02:
# bugfixes
### V1.01:
# Added: 12h/24h option, scroll speed settings, webserver to set wifi and 12/24h mode.
### V1.00:
# initial code

#### SETTINGS ##############################################################################################################################

  clock_timezone: "Europe/Copenhagen" # (only used if no HA)

  mqtt_broker: 10.66.66.12
  mqtt_topic: "matrixclock-1"

  pin_mosi: GPIO8
  pin_cs:   GPIO9
  pin_sck:  GPIO10

  num_chips: "4"

  scroll_delay_ms: "12"   # delay between scroll steps (ms). Increase = slower, Decrease = faster/smoother

############################################################################################################################################

  y_offset: "0"
  y_scroll_offset: "0"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: false



esp32:
  variant: esp32c3
  framework:
    type: arduino

logger:

api:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "${friendly_name} Setup"
    password: "matrixclock"

captive_portal:

web_server:
  port: 80

mqtt:
  broker: ${mqtt_broker}
  port: 1883
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false
  birth_message:
    topic: "${mqtt_topic}/status"
    payload: "online"
    qos: 0
    retain: true
  will_message:
    topic: "${mqtt_topic}/status"
    payload: "offline"
    qos: 0
    retain: true
  on_message:
    - topic: "${mqtt_topic}/scroll"
      then:
        - lambda: |-
            std::string s = x.c_str();
            s.erase(std::remove(s.begin(), s.end(), '\r'), s.end());
            s.erase(std::remove(s.begin(), s.end(), '\n'), s.end());
            s.erase(std::remove_if(s.begin(), s.end(),
              [](unsigned char c){ return c < 0x20; }), s.end());

            id(scroll_text) = s;
            id(scroll_x) = ${num_chips} * 8;
            id(scrolling) = true;
        - script.execute: do_scroll

    - topic: "${mqtt_topic}/mode"
      then:
        - lambda: |-
            if (x == "12") {
              id(use_12h_mode) = true;
            } else if (x == "24") {
              id(use_12h_mode) = false;
            }
        - component.update: clock_format_select

time:
  - platform: homeassistant
    id: homeassistant_time

  # Fallback: SNTP (works without HA)
  - platform: sntp
    id: ntp_time
    timezone: ${clock_timezone}

### Fonts must exist in esphome/fonts/
font:
  - file: "fonts/Eight-Bit-Dragon.ttf"
    id: digit5
    size: 8
    glyphs: ["0123456789: -"]

  - file: "fonts/5x8.bdf"
    id: font5x8
    size: 8

spi:
  clk_pin: ${pin_sck}
  mosi_pin: ${pin_mosi}

globals:
  - id: scroll_text
    type: std::string
    initial_value: ""
  - id: scroll_x
    type: int
    initial_value: '0'
  - id: scrolling
    type: bool
    initial_value: 'false'
  - id: use_12h_mode
    type: bool
    restore_value: true
    initial_value: 'false'

select:
  - platform: template
    id: clock_format_select
    name: "${friendly_name} Clock Format"
    icon: "mdi:clock-time-three-outline"
    options: ["24", "12"]
    lambda: |-
      return id(use_12h_mode) ? std::string("12") : std::string("24");
    set_action:
      - lambda: |-
          id(use_12h_mode) = (x == "12");
      - component.update: clock_format_select

script:
  - id: do_scroll
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(scrolling);'
          then:
            - lambda: |-
                id(scroll_x) -= 1;
                int end_limit = - (int(id(scroll_text).length()) * 6);
                if (id(scroll_x) < end_limit) {
                  id(scrolling) = false;
                }
            - component.update: matrix
            - delay: ${scroll_delay_ms}ms

display:
  - platform: max7219digit
    id: matrix
    cs_pin: ${pin_cs}
    num_chips: ${num_chips}
    intensity: 2
    update_interval: 500ms
    rotate_chip: 0
    reverse_enable: false
    flip_x: false

    lambda: |-
      it.clear();

      if (id(scrolling)) {
        it.print(id(scroll_x), ${y_scroll_offset}, id(font5x8), id(scroll_text).c_str());
        return;
      }

      // Prefer HA time; fall back to SNTP if HA isn't available
      auto now = id(homeassistant_time).now();
      if (!now.is_valid()) {
        now = id(ntp_time).now();
      }
      if (!now.is_valid()) {
        it.print(0, ${y_offset}, id(digit5), "--:--");
        return;
      }

      // Compute hour based on 12h/24h mode
      int hour_to_show = now.hour;
      if (id(use_12h_mode)) {
        hour_to_show = now.hour % 12;
        if (hour_to_show == 0) hour_to_show = 12;
      }

      char hh[3], mm[3];
      snprintf(hh, sizeof(hh), "%02d", hour_to_show);
      snprintf(mm, sizeof(mm), "%02d", now.minute);

      const int x_h1   = 3;
      const int x_h2   = 9;
      const int x_m1   = 17;
      const int x_m2   = 23;
      const int y      = ${y_offset};

      char ch[2] = { hh[0], 0 };
      it.print(x_h1, y, id(digit5), ch);
      ch[0] = hh[1];
      it.print(x_h2, y, id(digit5), ch);

      ch[0] = mm[0];
      it.print(x_m1, y, id(digit5), ch);
      ch[0] = mm[1];
      it.print(x_m2, y, id(digit5), ch);

      // Tiny AM/PM letter at far right when 12h is selected
      if (id(use_12h_mode)) {
        const bool is_pm = now.hour >= 12;

        // 3x4 bitmap font for 'A' and 'P'
        auto draw_letter_3x4 = [&](int x, int y_top, bool draw_A) {
          const uint8_t A[4] = {0b010, 0b101, 0b111, 0b101}; // width=3
          const uint8_t P[4] = {0b110, 0b101, 0b110, 0b100}; // width=3
          const uint8_t* L = draw_A ? A : P;

          for (int r = 0; r < 4; r++) {
            for (int c = 0; c < 3; c++) {
              if (L[r] & (1 << (2 - c))) {
                int xx = x + c;
                int yy = y_top + r;
                if (yy >= 0 && yy <= 7 && xx >= 0 && xx <= 31) {
                  it.draw_pixel_at(xx, yy, Color::WHITE);
                }
              }
            }
          }
        };

        // right edge (cols 29..31), vertically centered
        const int x_ampm = 29;
        const int y_ampm = y + 4;
        draw_letter_3x4(x_ampm, y_ampm, !is_pm); // A if AM, P if PM
      }

      // Colon blink
      const bool blink_on = (now.second % 2) == 0;
      if (blink_on) {
        const int x_col = (x_h2 + x_m1) / 2 + 2;
        int y1 = y + 2;
        int y2 = y + 5;
        if (y1 >= 0 && y1 <= 7) it.draw_pixel_at(x_col, y1, Color::WHITE);
        if (y2 >= 0 && y2 <= 7) it.draw_pixel_at(x_col, y2, Color::WHITE);
      }
