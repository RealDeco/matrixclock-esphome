substitutions:
  name: esphome-web-8446c0
  friendly_name: matrixclock-esphome

  pin_mosi: GPIO8
  pin_cs:   GPIO9
  pin_sck:  GPIO10

  num_chips: "4"
  y_offset: "0"
  y_scroll_offset: "0"

  mqtt_broker: 10.66.66.12
  mqtt_topic: "matrixclock-1"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: false

esp32:
  variant: esp32c3
  framework:
    type: arduino

logger:

api:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:

captive_portal:

mqtt:
  broker: ${mqtt_broker}
  port: 1883
  username: !secret mqtt_username
  password: !secret mqtt_password
  birth_message:
    topic: "${mqtt_topic}/status"
    payload: "online"
    qos: 0
    retain: true
  will_message:
    topic: "${mqtt_topic}/status"
    payload: "offline"
    qos: 0
    retain: true
  on_message:
    - topic: "${mqtt_topic}/scroll"
      then:
        - lambda: |-
            id(scroll_text) = x.c_str();
            id(scroll_x) = ${num_chips} * 8;
            id(scrolling) = true;
        - script.execute: do_scroll

time:

### uncomment this to use NTP and not depend on HA

#  - platform: sntp
#    id: ntp_time
#    timezone: Europe/Copenhagen

  - platform: homeassistant
    id: homeassistant_time

### REQUIRES THESE FONTS TO BE IN YOUR esphome/fonts/ DIRECTORY ###
font:
  - file: "fonts/Eight-Bit-Dragon.ttf"
    id: digit5
    size: 8
    glyphs: ["0123456789: "]

  - file: "fonts/5x8.bdf"
    id: font5x8
    glyphs: ["0123456789: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_.!,?()[]/%+*#&'\""]

spi:
  clk_pin: ${pin_sck}
  mosi_pin: ${pin_mosi}

globals:
  - id: scroll_text
    type: std::string
    initial_value: ""
  - id: scroll_x
    type: int
    initial_value: '0'
  - id: scrolling
    type: bool
    initial_value: 'false'

script:
  - id: do_scroll
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(scrolling);'
          then:
            - lambda: |-
                id(scroll_x) -= 1;
                int end_limit = - (int(id(scroll_text).length()) * 6);
                if (id(scroll_x) < end_limit) {
                  id(scrolling) = false;
                }
            - component.update: matrix
            - delay: 25ms

display:
  - platform: max7219digit
    id: matrix
    cs_pin: ${pin_cs}
    num_chips: ${num_chips}
    intensity: 2
    update_interval: 500ms
    rotate_chip: 0
    reverse_enable: false
    flip_x: false

    lambda: |-
      it.clear();

      if (id(scrolling)) {
        it.print(id(scroll_x), ${y_scroll_offset}, id(font5x8), id(scroll_text).c_str());
        return;
      }

      auto now = id(homeassistant_time).now();
      if (!now.is_valid()) {
        it.print(0, ${y_offset}, id(digit5), "--:--");
        return;
      }

      char hh[3], mm[3];
      snprintf(hh, sizeof(hh), "%02d", now.hour);
      snprintf(mm, sizeof(mm), "%02d", now.minute);

      const int x_h1   = 3;
      const int x_h2   = 10;
      const int x_m1   = 18;
      const int x_m2   = 24;
      const int y      = ${y_offset};

      char ch[2] = { hh[0], 0 };
      it.print(x_h1, y, id(digit5), ch);
      ch[0] = hh[1];
      it.print(x_h2, y, id(digit5), ch);

      ch[0] = mm[0];
      it.print(x_m1, y, id(digit5), ch);
      ch[0] = mm[1];
      it.print(x_m2, y, id(digit5), ch);

      const bool blink_on = (now.second % 2) == 0;
      if (blink_on) {
        const int x_col = (x_h2 + x_m1) / 2 + 2;
        int y1 = y + 3;
        int y2 = y + 5;
        if (y1 >= 0 && y1 <= 7) it.draw_pixel_at(x_col, y1, Color::WHITE);
        if (y2 >= 0 && y2 <= 7) it.draw_pixel_at(x_col, y2, Color::WHITE);
      }
